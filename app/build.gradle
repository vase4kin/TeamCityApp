/*
 * Copyright 2020 Andrey Tolpeev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import teamcityapp.buildsrc.Libs
import teamcityapp.buildsrc.Config

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.jmailen.kotlinter'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply from: '../scripts/jacoco.gradle'
apply from: '../scripts/pmd.gradle'

android {
    defaultConfig {
        applicationId Config.applicationId
        versionCode Config.versionCode
        versionName Config.versionName
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            minifyEnabled true
        }
        debug {
            applicationIdSuffix = ".debug"
        }
    }

    flavorDimensions "default"

    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {

        }
    }

    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    dexOptions {
        jumboMode true
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the Firebase/Fabric/other random properties files
        exclude '/*.properties'
        exclude 'fabric/*.properties'
        exclude 'META-INF/*.properties'
        // More than one file was found with OS independent path 'META-INF/*.kotlin_module'
        exclude 'META-INF/*.kotlin_module'
    }

    // Fixing crash in androidTest
    // java.lang.NoClassDefFoundError: Failed resolution of: Landroidx/databinding/DataBinderMapperImpl;java.lang.NoClassDefFoundError: Failed resolution of: Landroidx/databinding/DataBinderMapperImpl;
    buildFeatures {
        dataBinding true
    }

    kotlinOptions {
        jvmTarget = Config.KotlinOptions.jvmTarget
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':libraries:utils')
    implementation project(':libraries:api')
    implementation project(':libraries:resources')
    implementation project(':libraries:theme')
    implementation project(':libraries:chrome-tabs')
    implementation project(':libraries:storage')
    implementation project(':libraries:storage-models')
    implementation project(':libraries:cache-manager')
    implementation project(':libraries:onboarding')
    implementation project(':libraries:security')
    implementation project(':libraries:remote')

    implementation project(':features:test-details:models')
    implementation project(':features:test-details:repository')
    implementation project(':features:test-details:feature')

    implementation project(':features:splash')

    implementation project(':features:about:models')
    implementation project(':features:about:repository')
    implementation project(':features:about:feature')

    implementation project(':features:manage-accounts')

    implementation project(':features:drawer')

    implementation project(':features:settings')

    implementation project(':features:change-details')

    implementation project(':features:properties:models')
    implementation project(':features:properties:feature')

    // Android support libraries
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.cardView
    implementation Libs.AndroidX.legacySupport
    implementation Libs.AndroidX.recyclerView
    implementation Libs.AndroidX.preference
    implementation Libs.Google.material
    implementation Libs.AndroidX.constraintLayout
    implementation Libs.AndroidX.LifeCycle.lifeCycle
    implementation Libs.AndroidX.LifeCycle.lifeCycleLiveData
    implementation Libs.AndroidX.LifeCycle.lifeCycleViewModel
    implementation Libs.AndroidX.LifeCycle.lifeCycleCommonJava8
    kapt Libs.AndroidX.LifeCycle.lifeCycleCompiler
    // Api third party libraries
    implementation Libs.OkHttp.okhttp
    implementation Libs.OkHttp.loggingInterceptor
    implementation Libs.Retrofit.retrofit
    implementation Libs.Retrofit.gsonConverter
    implementation Libs.Retrofit.retrofitRxjavaAdapter
    // Dialogs
    implementation Libs.dialogs
    // Views
    implementation Libs.errorView
    implementation Libs.Groupie.groupie
    // View injection
    implementation Libs.ButterKnife.butterKnife
    annotationProcessor Libs.ButterKnife.butterKnifeCompiler
    kapt Libs.ButterKnife.butterKnifeCompiler
    // Event bus
    implementation Libs.eventBus
    // Others
    implementation Libs.jodaTime
    implementation Libs.mugen
    implementation Libs.shimmerlayout
    implementation Libs.aboutLibrary
    // Onboarding
    implementation Libs.materialTapTargetPrompt
    // Dagger
    implementation Libs.Dagger.dagger
    annotationProcessor Libs.Dagger.compiler
    kapt Libs.Dagger.compiler
    implementation Libs.Dagger.androidSupport
    annotationProcessor Libs.Dagger.androidProcessor
    kapt Libs.Dagger.androidProcessor
    // Rx
    implementation Libs.RxJava.rxJava
    implementation Libs.RxJava.rxAndroid
    implementation Libs.RxJava.rxjava_kotlin
    // Rx cache
    implementation Libs.RxCache.rxCache
    implementation Libs.RxCache.jolyglot
    // Encryption
    implementation Libs.conceal
    // Firebase
    implementation Libs.Google.firebaseCore
    implementation Libs.Google.firebaseConfig
    implementation Libs.Google.firebasePerf
    // Bottom nav libries
    implementation Libs.fragNav
    implementation Libs.ahbottomnavigation
    // Unit tests
    testImplementation Libs.junit
    testImplementation Libs.Mockito.mockito3
    testImplementation Libs.Mockito.mockitoKotlin
    testImplementation Libs.hamcrestJunit
    // Ui tests
    // Core library
    androidTestImplementation Libs.AndroidX.Test.core
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation Libs.AndroidX.Test.runner
    androidTestImplementation Libs.AndroidX.Test.rules
    // Assertions
    androidTestImplementation Libs.AndroidX.Test.extJunit
    // Espresso dependenciesd
    androidTestImplementation Libs.AndroidX.Test.Espresso.core
    androidTestImplementation Libs.AndroidX.Test.Espresso.intents
    androidTestImplementation Libs.AndroidX.Test.Espresso.contrib
    androidTestImplementation Libs.AndroidX.Test.Espresso.web
    // Mockito
    androidTestImplementation Libs.Mockito.mockito3
    androidTestImplementation Libs.Mockito.mockitoKotlin
    // Dex maker
    androidTestImplementation Libs.DexMaker.dexmaker
    androidTestImplementation Libs.DexMaker.dexmakerMockito
    // Dagger mock
    androidTestImplementation Libs.daggerMock
    // Condition watcher
    androidTestImplementation Libs.conditionwatcher
    // Resolve conflits between apks
    androidTestImplementation Libs.Google.material
    androidTestImplementation Libs.AndroidX.recyclerView
    // Crashlytics
    implementation(Libs.Google.crashlytics)
    implementation(Libs.Google.analytics)

    implementation Libs.Kotlin.stdlib
}

apply plugin: 'com.google.gms.google-services'
