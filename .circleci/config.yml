version: 2.1
references:
  workspace_root: &workspace_root
      ~/TeamCityApp
  container_config: &container_config
    docker:
      - image: circleci/android:api-29
    working_directory: *workspace_root
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root
  general_cache_key: &general_cache_key
    key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
jobs:
  pre-build:
    <<: *container_config
    steps:
      - checkout
      - restore_cache:
          <<: *general_cache_key
      - run:
          name: Download sdk
          command: |
            echo y | sdkmanager "tools" "platform-tools" "build-tools;29.0.2" "extras;android;m2repository" "platforms;android-29" "emulator" --verbose
            sdkmanager --update --verbose
      - run:
          name: Download dependencies
          command: ./gradlew dependencies
      - save_cache:
          <<: *general_cache_key
          paths:
            - ~/.gradle
      - run:
          name: Copy google-serivices json mocks
          command: |
            mkdir -p app/src/mock/debug/
            cp mock-mockDebug-google-services.json ./app/src/mock/debug/google-services.json
            mkdir -p app/src/prod/debug/
            cp mock-prodDebug-google-services.json ./app/src/prod/debug/google-services.json
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .
  build-tests:
    <<: *container_config
    steps:
      - *attach_workspace
      - restore_cache:
          <<: *general_cache_key
      - run:
          name: Build tests
          command: ./gradlew assembleMockDebug assembleMockDebugAndroidTest assembleMockDebugUnitTest
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .
  checks:
    <<: *container_config
    steps:
      - *attach_workspace
      - restore_cache:
          <<: *general_cache_key
      - run:
          name: Run checks
          command: ./gradlew lintMockDebug pmd lintKotlin
      - run:
          name: Copy checks reports
          command: |
            mkdir -p app/build/circleci/artifacts/reports/lint/
            mv app/build/reports/lint-report/ app/build/circleci/artifacts/reports/lint/
            mkdir -p app/build/circleci/artifacts/reports/pmd/
            mv app/build/reports/pmd/ app/build/circleci/artifacts/reports/pmd/
      - store_artifacts:
          path: app/build/circleci/artifacts/reports
          destination: reports
  unit-tests:
    <<: *container_config
    steps:
      - *attach_workspace
      - restore_cache:
          <<: *general_cache_key
      - run:
          name: Run unit tests
          command: ./gradlew testMockDebugUnitTest
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - app/build/jacoco
      - store_test_results:
          path: app/build/test-results/testMockDebugUnitTest
  ui-tests:
    <<: *container_config
    parameters:
      devicemodel:
        description: "Device name to execute tests on"
        default: "sailfish,version=28,locale=en,orientation=portrait"
        type: string
    steps:
      - *attach_workspace
      - restore_cache:
          <<: *general_cache_key
      - run:
          name: Install Crcmod
          command: |
            sudo pip install -U crcmod
      - run:
          name: Log in to Google Cloud Platform
          shell: /bin/bash -euo pipefail
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode > ${HOME}/client-secret.json
            gcloud config set project $PROJECT_ID
            gcloud auth activate-service-account $SERVICE_ACCOUNT --key-file ${HOME}/client-secret.json
      - run:
          name: Run UI tests
          no_output_timeout: 15m
          shell: /bin/bash -euo pipefail
          command: |
            gcloud firebase test android models list
            (gcloud firebase test android run --type instrumentation \
              --app app/build/outputs/apk/mock/debug/app-mock-debug.apk \
              --test app/build/outputs/apk/androidTest/mock/debug/app-mock-debug-androidTest.apk \
              --device model=<< parameters.devicemodel >> \
              --timeout 15m \
              --results-bucket $PROJECT_ID \
              --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec" \
              --directories-to-pull /sdcard 2>&1 | tee firebase.log) || EXIT_CODE=$?

            RESULTS_BUCKET=$(sed -n 's|^.*\[https://console.developers.google.com/storage/browser/\([^]]*\).*|gs://\1|p' firebase.log)
            TEST_LAB_ARTIFACTS_DIRECTORY="app/build/circleci/artifacts/testlab"
            echo "Downloading from: ${RESULTS_BUCKET}"
            mkdir -p $TEST_LAB_ARTIFACTS_DIRECTORY
            chmod +x $TEST_LAB_ARTIFACTS_DIRECTORY
            gsutil -m cp -n -R -Z "$RESULTS_BUCKET*" $TEST_LAB_ARTIFACTS_DIRECTORY

            exit ${EXIT_CODE:-0}
      - run:
          name: Copy UI tests coverage artifact
          command: find app/build/circleci/artifacts/testlab -name "*.ec" -exec cp {} app/build/ \;
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - app/build/coverage.ec
      - run:
          name: Copy UI Junit artifacts
          command: |
            mkdir -p app/build/circleci/test-results/
            find app/build/circleci/artifacts/testlab -name "*.xml" -exec cp {} app/build/circleci/test-results/ \;
      - store_artifacts:
          path: app/build/circleci/artifacts
          destination: artifacts
      - store_test_results:
          path: app/build/circleci/test-results
  coverage:
    <<: *container_config
    steps:
      - *attach_workspace
      - restore_cache:
          <<: *general_cache_key
      - run:
          name: Generate code coverage
          command: |
            ./gradlew generateCodeCoverageReport --stacktrace
            mkdir -p app/build/circleci/artifacts/coverage/
            find . -type f -regex ".*/build/coverage/generateCodeCoverageReport/generateCodeCoverageReport.xml" -exec cp {} app/build/circleci/artifacts/coverage/ \;
      - run:
          name: Send coverage to CodeCov
          command: bash <(curl -s https://codecov.io/bash) -f './app/build/coverage/generateCodeCoverageReport/generateCodeCoverageReport.xml'
      - store_artifacts:
          path: app/build/circleci/artifacts
          destination: artifacts
workflows:
  version: 2
  mobile_workflow:
    jobs:
      - pre-build
      - build-tests:
          requires:
            - pre-build
      - checks:
          requires:
            - pre-build
      - unit-tests:
          requires:
            - build-tests
      - ui-tests:
          name: ui-tests-v28
          requires:
            - build-tests
      - ui-tests:
          name: ui-tests-v26
          devicemodel: dreamqlteue,version=26,locale=en,orientation=portrait
          requires:
            - build-tests
      - ui-tests:
          name: ui-tests-v24
          devicemodel: lucye,version=24,locale=en,orientation=portrait
          requires:
            - build-tests
      - coverage:
          requires:
            - ui-tests-v28
            - unit-tests
